{
    // The workbench consists of UI connected to a number of external plugins,
    // which are organized into 'parsers', 'file_detail_views', and
    // 'decision_views'.  These are  supported through the defining of the
    // "build" environment.
    //
    // The reason this is a custom format instead of a standard Dockerfile is
    // so that the entire deployment might be specified in a single location.
    // Dockerfile is necessary because many external plugins have their own
    // requirements, etc.
    //
    // Everything in this file except 'build' is live-reloaded when used with
    // the --development flag. This applies mostly to plugins, but can also
    // apply to 'parsers' when the DB is reset through the UI (use on small
    // collections of files only).


    // The name of the docker image to be produced.
    name: 'galois-workbench-icc',

    parsers: {
        argyllCms: {
          exec: ['iccdump', '-v', '3', '<inputFile>'],
          version: 'test',
          parse: {
            type: 'regex-counter',
            version: '1',
            stdstar: {
              '.*': {
                nameReplace: {'[0-9]': ''},
              },
            },
          },
        },
        littleCms: {
          exec: ['psicc', '-c', '2', '-b', '-i', '<inputFile>'],
          version: 'test-limit-output2',
          parse: {
            type: 'regex-counter',
            version: '1',
            stdstar: {
              '^\\[?<?[a-f0-9]+>?': {
                nameGroup: '',
              },
              '.*': {
                nameReplace: {'[0-9]': ''},
              },
            },
          },
        },
        refIccMaxIccDump: {
          exec: ['/opt/reficcmax/bin/iccDumpProfile', '-v', '<inputFile>'],
          version: 'test',
          parse: {
            type: 'regex-counter',
            version: '1',
            stdstar: {
              '.*': {
                nameReplace: {'[0-9]': ''},
              },
            },
          },
        },
        refIccMaxIccApplyProfiles: {
          exec: [
            '/opt/reficcmax/bin/iccApplyProfiles',
            './cat.jpg.tiff', '<tempFile .tiff>',
            '0', '0', '0', '0', '0',
            '<inputFile>',
            '0'],
          version: 'test',
          parse: {
            type: 'regex-counter',
            version: '1',
            stdstar: {
              '.*': {
                nameReplace: {'[0-9]': ''},
              },
            },
          },
        },
        refIccMaxPeterIccDump: {
          exec: ['/opt/reficcmax_peter/bin/iccDumpProfile', '-v', '<inputFile>'],
          version: 'test',
          parse: {
            type: 'regex-counter',
            version: '1',
            stdstar: {
              '.*': {
                nameReplace: {'[0-9]': ''},
              },
            },
          },
        },
        refIccMaxToAndFromXml: {
          exec: ['bash', '-c',
              '/opt/reficcmax/bin/iccToXml "$0" "$1" ; /opt/reficcmax/bin/iccFromXml "$1" "$2"',
              '<inputFile>', '<tempFile .xml>', '<tempFile .icc>'],
          version: 'test6',
          parse: {
            type: 'regex-counter',
            version: '1',
            stdstar: {
              '.*': {
                nameReplace: {'[0-9]': ''},
              },
            },
          },
        },
    },

    decision_default: '\
# Any line beginning with a hash is a comment.  \n\
filters:  \n\
  # Filters are defined as groups of regular expressions.  \n\
\n\
  S1:  \n\
    test regex  \n\
  \n\
outputs:  \n\
  # Standard output status -- If a PDF passes filter S1, it will be "valid",  \n\
  # otherwise "rejected".  \n\
  status:  \n\
    "valid" is S1  \n\
    "rejected" else  \n\
  ',

    decision_views: {
    },

    file_detail_views: {
      refIccMaxCatPhoto: {
        label: 'refIccMax Apply to cat',
        type: 'program_to_html',
        exec: ['python3', 'iccApplyProfile.py',
          '/opt/reficcmax/bin/iccApplyProfiles',
          './cat.jpg.tiff', '<tempFile .tiff>',
          '0', '0', '0', '0', '0',
          '<inputFile>',
          '0'],
      },
    },

    build: {
        // The software environment must be defined.  It optionally may be grouped
        // into different build stages, which map to stages in docker.
        stages: {
            // Defining docker stages -- there MUST be a 'base' stage, which is
            // automatically included in final output.
            // Other stages with `copy_output` defined will also be included
            // in the final output.
            // Stages are written to the Dockerfile in order.  Most plugins will
            // only need to modify the 'final' stage's commands.

            // The base stage must have a 'from', which defines the base
            // image.  Other stages may also specify 'from'; otherwise,
            // `from: 'base'` is implied.

            // The 'final' stage is special -- it only allows commands, and
            // any commands executed are executed only in the final image.

            // Each stage may have a 'copy_output', which defines the outputs
            // produced by the stage.  The key is the absolute path to the file
            // or directory to be copied (may have asterisk wildcards), and the
            // value is either `true` to copy to the same absolute path, or a
            // new copy destination.  When specifying a new destination,
            // if that destination is a directory, append a trailing slash.

            // Each stage may have a 'commands', which specifies commands to
            // run.

            // Optimization note: every time 'base' gets updated, there may
            // be a long recompilation process. Ideally, most development work
            // should not touch 'base'. One way around this is for other images
            // to specify their own 'from' keys.

            base: {
                'from': 'ubuntu:22.04',
                commands: [
                    // Base packages
                    'RUN apt-get update && apt-get install -y \
                        curl \
                        python3 \
                        python3-pip \
                        xpdf \
                        wget \
                        ',
                    // Note that we will *also* install a newer version of poppler in /usr/local/bin
                    'RUN apt-get update && apt-get install -y \
                        poppler-utils \
                        ',
                    // Documented caradoc dependencies
                    'RUN apt-get update && apt-get install -y \
                        ocaml \
                        opam \
                        zlib1g-dev \
                        ',
                    // Undocumented caradoc dependencies
                    'RUN apt-get update && apt-get install -y \
                        m4 \
                        pkg-config \
                        libgmp3-dev \
                        ',
                    // Requirements for building poppler utils from source
                    // No effort has been made to distinguish what's required only
                    // for the build, so we install them all up front.
                    'RUN apt-get update && apt-get install -y \
                        uuid-dev \
                        gperf \
                        libtool \
                        gettext \
                        autopoint \
                        autoconf \
                        python3-dev \
                        libssl-dev \
                        cmake \
                        libfreetype6-dev \
                        libxcb-composite0-dev \
                        libxml2-dev \
                        ',
                    // Needed to build pdftocairo target in poppler
                    'RUN apt-get update && apt-get install -y \
                        libcairo2-dev \
                        ',
                    // Needed to build qpdf
                    'RUN apt-get update && apt-get install -y \
                        libjpeg-dev \
                        ',
                ],
            },

            refIccMax: {
              copy_output: {
                '/opt/reficcmax': true,
                '/opt/reficcmax/lib': '/usr/lib',
                '/opt/reficcmax_peter': true,
              },
              commands: [
                'RUN echo "libtiff dependency -- install must end in usr/local..." \
                  && wget https://download.osgeo.org/libtiff/tiff-4.3.0.tar.gz \
                  && tar -xzvf tiff-4.3.0.tar.gz \
                  && cd tiff-4.3.0 \
                  && ./configure prefix=/opt/reficcmax/libtiff/usr/local && make && make install \
                  && cd && rm -rf tiff-4.3.0',
                'RUN echo "at least 2021-11-05" \
                  && git clone https://github.com/InternationalColorConsortium/RefIccMAX \
                  && cd RefIccMAX && mkdir build && cd build \
                  && cmake -DCMAKE_INSTALL_PREFIX=/opt/reficcmax -DTIFF_LIBRARY=/opt/reficcmax/libtiff/usr/local/lib/libtiff.so -DTIFF_INCLUDE_DIR=/opt/reficcmax/libtiff/usr/local/include ../Build/Cmake \
                  && make \
                  && make install',
                // Same image, install Peter's version too
                'RUN cd / \
                  && git clone https://github.com/petervwyatt/DemoIccMAX \
                  && cd DemoIccMAX && mkdir build && cd build \
                  && cmake -DCMAKE_INSTALL_PREFIX=/opt/reficcmax_peter -DTIFF_LIBRARY=/opt/reficcmax/libtiff/usr/local/lib/libtiff.so -DTIFF_INCLUDE_DIR=/opt/reficcmax/libtiff/usr/local/include ../Build/Cmake \
                  && make \
                  && make install',
              ],
            },

            // final is a special stage which runs in the final image.  Useful
            // for installing dependencies for downstream tools, without needing
            // to rebuild all of the other workbench internals.
            final: {
                commands: [
                    // Note that {dist} gets replaced in Dockerfile commands with
                    // the directory containing `config.json5`
                    'RUN apt-get update && apt-get install -y argyll imagemagick liblcms2-utils',
               ],
            },
        },
    },
}
